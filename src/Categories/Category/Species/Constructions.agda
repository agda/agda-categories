{-# OPTIONS --without-K --safe #-}
module Categories.Category.Species.Constructions where

-- Construction of basic species

open import Level
open import Data.Empty
open import Data.Fin.Base as Fin using (Fin)
open import Data.Fin.Properties using (¬¨Fin0)
open import Data.Nat.Base using (‚Ñï; suc; zero)
open import Data.Product as √ó using (Œ£; proj‚ÇÅ; proj‚ÇÇ; _,_)
open import Data.Product.Relation.Binary.Pointwise.NonDependent using (√ó-setoid)
open import Data.Sum.Base as ‚äé using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Sum.Relation.Binary.Pointwise using (_‚äé‚Çõ_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit.Polymorphic using (‚ä§; tt)
open import Function.Base using () renaming (id to id‚Üí)
open import Function.Bundles using (Func; _‚ü®$‚ü©_)
open import Relation.Nullary using (Dec; yes; no)
open import Relation.Binary.Bundles using (Setoid)
import Relation.Binary.PropositionalEquality as ‚â°

open import Categories.Category.Core using (Category)
open import Categories.Category.Construction.ObjectRestriction using (ObjectRestriction)
open import Categories.Category.Construction.Core using (Core)
open import Categories.Category.Instance.Setoids using (Setoids)
open import Categories.Category.Instance.FinSetoids using (FinSetoids; IsFiniteSetoid)
open import Categories.Category.Product
open import Categories.Functor.Core using (Functor)
open import Categories.Functor.Construction.Constant using (const)
open import Categories.Functor.Hom
open import Categories.Morphism.IsoEquiv using (_‚âÉ_)
open import Categories.NaturalTransformation.NaturalIsomorphism using (NaturalIsomorphism)
open import Categories.Category.Species

import Categories.Morphism as Mor

-- Some useful preliminary definitions.  Should be in stdlib
module _ {o ‚Ñì : Level} where
  -- the Setoid version of ‚ä•
  ‚ä•-Setoid : Setoid o ‚Ñì
  ‚ä•-Setoid = record
    { Carrier = Lift o ‚ä•
    ; _‚âà_ = Œª ()
    ; isEquivalence = record { refl = Œª { {()} } ; sym = Œª { {()} } ; trans = Œª { {()} } } }

  ‚ä§-Setoid : Setoid o ‚Ñì
  ‚ä§-Setoid = record { Carrier = ‚ä§ ; _‚âà_ = Œª _ _ ‚Üí ‚ä§}

  ‚ä§-FinSetoid : Œ£ (Setoid o ‚Ñì) IsFiniteSetoid
  ‚ä§-FinSetoid =
    ‚ä§-Setoid ,
    1 ,
    record
      { to = Œª _ ‚Üí Fin.zero
      ; from = Œª _ ‚Üí tt
      ; to-cong = Œª _ ‚Üí ‚â°.refl
      ; from-cong = Œª _ ‚Üí tt
      ; inverse = (Œª { {Fin.zero} _ ‚Üí ‚â°.refl }) , Œª _ ‚Üí tt
      }

-- We could have 4 levels, and still define Zero and One‚Ä≤.
-- But X needs o ‚â° o‚Ä≤ and ‚Ñì ‚â° ‚Ñì‚Ä≤.  And then the 'proper' definition of One makes that all the same.
module _ (o : Level) where
  -- Setoid o ‚Ñì is used a lot, name it too
  S = Setoid o o
  FinSet = FinSetoids o o
  ùîπ = Core FinSet
  Sp = Species o o o o

  open Category Sp
  open Mor FinSet
  open _‚âÖ_

  -- convenient alias: a structure is an Object of Species
  -- (which is of course a functor)
  Structure = Obj

  Zero : Structure
  Zero = const ‚ä•-Setoid

  -- One can be specified in two ways.  The traditional one (which doesn't generalize as well)
  -- uses 'counting' directly. Don't even try it here, it just leads to much pain.

  -- There is a much nicer specification.
  One : Structure
  One = Hom[ ùîπ ][ ‚ä§-FinSetoid ,-]

  -- the 'identity' Functor isn't really, it needs to forget the proof.
  X : Structure
  X = record
    { F‚ÇÄ = proj‚ÇÅ
    ; F‚ÇÅ = Œª f ‚Üí record
        { to = from f ‚ü®$‚ü©_
        ; cong = Func.cong (from f)
        }
    ; identity = Œª { {(S , _)} ‚Üí Setoid.refl S }
    ; homomorphism = Œª {_} {_} {Z} ‚Üí Setoid.refl (proj‚ÇÅ Z)
    ; F-resp-‚âà = _‚âÉ_.from-‚âà
    }

  -- generally this should be defined elsewhere
  _+_ : Structure ‚Üí Structure ‚Üí Structure
  A + B = record
    { F‚ÇÄ = Œª x ‚Üí A.‚ÇÄ x ‚äé‚Çõ B.‚ÇÄ x
    ; F‚ÇÅ = Œª X‚âÖY ‚Üí record
      { to = ‚äé.map (A.‚ÇÅ X‚âÖY ‚ü®$‚ü©_) (B.‚ÇÅ X‚âÖY ‚ü®$‚ü©_)
      ; cong = Œª { (inj‚ÇÅ x‚âày) ‚Üí inj‚ÇÅ (Func.cong (A.‚ÇÅ X‚âÖY) x‚âày )
                 ; (inj‚ÇÇ x‚âày) ‚Üí inj‚ÇÇ (Func.cong (B.‚ÇÅ X‚âÖY) x‚âày)}
      }
    ; identity = Œª { {S , n , pf} {inj‚ÇÅ x} ‚Üí inj‚ÇÅ (A.identity {x = x})
                   ; {S , n , pf} {inj‚ÇÇ y} ‚Üí inj‚ÇÇ B.identity}
    ; homomorphism = Œª { {x = inj‚ÇÅ x} ‚Üí inj‚ÇÅ A.homomorphism
                       ; {x = inj‚ÇÇ y} ‚Üí inj‚ÇÇ B.homomorphism}
    ; F-resp-‚âà = Œª { f‚âàg {inj‚ÇÅ x} ‚Üí inj‚ÇÅ (A.F-resp-‚âà f‚âàg)
                   ; f‚âàg {inj‚ÇÇ y} ‚Üí inj‚ÇÇ (B.F-resp-‚âà f‚âàg)}
    }
    where
    module A = Functor A
    module B = Functor B

  -- Hadamard product
  _√ó_ : Structure ‚Üí Structure ‚Üí Structure
  A √ó B = record
    { F‚ÇÄ = Œª x ‚Üí √ó-setoid (A.‚ÇÄ x) (B.‚ÇÄ x)
    ; F‚ÇÅ = Œª X‚âÖY ‚Üí record
      { to = √ó.map (A.‚ÇÅ X‚âÖY ‚ü®$‚ü©_) (B.‚ÇÅ X‚âÖY ‚ü®$‚ü©_)
      ; cong = √ó.map (Func.cong (A.‚ÇÅ X‚âÖY)) (Func.cong (B.‚ÇÅ X‚âÖY))
      }
    ; identity = A.identity , B.identity
    ; homomorphism = A.homomorphism , B.homomorphism
    ; F-resp-‚âà = Œª f‚âàg ‚Üí (A.F-resp-‚âà f‚âàg) , (B.F-resp-‚âà f‚âàg)
    }
    where
    module A = Functor A
    module B = Functor B
