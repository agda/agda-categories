{-# OPTIONS --without-K --safe #-}

open import Categories.Category

-- we use duality to prove properties about coequalizer
module Categories.Diagram.Coequalizer.Properties {o ‚Ñì e} (ùíû : Category o ‚Ñì e) where

open Category ùíû

open import Categories.Diagram.Coequalizer ùíû using (Coequalizer; IsCoequalizer; Coequalizer‚áíEpi; up-to-iso)
open import Categories.Morphism ùíû using (_RetractOf_; _‚âÖ_)
open _‚âÖ_
import Categories.Morphism.Reasoning as MR
open import Categories.Diagram.Equalizer op using (Equalizer)
open import Categories.Diagram.Equalizer.Properties op using (section-equalizer)
open import Categories.Diagram.Duality ùíû using (Coequalizer‚áícoEqualizer; IscoEqualizer‚áíIsCoequalizer)
open import Categories.Diagram.KernelPair ùíû using (KernelPair)
open import Categories.Diagram.Pullback ùíû using (Pullback; IsPullback)
open import Categories.Morphism.Regular ùíû using (RegularEpi)


import Relation.Binary.Reasoning.Setoid as SR

open Pullback hiding (universal; unique)

private
  variable
    A B : Obj
    f g : A ‚áí B

module _ (coe : Coequalizer f g) where
  open Coequalizer coe

  private
    equalizer : Equalizer f g
    equalizer = Coequalizer‚áícoEqualizer coe

  open Equalizer equalizer
    using (unique‚Ä≤; unique-diagram)
    renaming ( id-equalize      to id-coequalize
             ; equalize-resp-‚âà  to coequalize-resp-‚âà
             ; equalize-resp-‚âà‚Ä≤ to coequalize-resp-‚âà‚Ä≤
             )
    public

-- a regular epi is a coequalizer of its kernel pair
regular-is-coeq-kp : {A B : Obj} (f : A ‚áí B) ‚Üí RegularEpi f ‚Üí (kp : KernelPair f) ‚Üí IsCoequalizer (p‚ÇÅ kp) (p‚ÇÇ kp) f
regular-is-coeq-kp {A} {B} f record { C = D ; h = h ; g = g ; coequalizer = coeq } kp = record
  { equality   = IsPullback.commute (isPullback kp)
  ; coequalize = Œª {_}{u} u‚àòp‚ÇÅ‚âàu‚àòp‚ÇÇ ‚Üí coequalize (u‚àòh‚âàu‚àòg u u‚àòp‚ÇÅ‚âàu‚àòp‚ÇÇ)
  ; universal  = universal
  ; unique     = unique
  }

  where
    open IsCoequalizer coeq
    pb-univ : D ‚áí P kp
    pb-univ = IsPullback.universal (isPullback kp) equality

    u‚àòh‚âàu‚àòg : {X : Obj} ‚Üí (u : A ‚áí X) ‚Üí u ‚àò (p‚ÇÅ kp) ‚âà u ‚àò (p‚ÇÇ kp) ‚Üí u ‚àò h ‚âà u ‚àò g
    u‚àòh‚âàu‚àòg {X} u u‚àòp‚ÇÅ‚âàu‚àòp‚ÇÇ = begin
      u ‚àò h                   ‚âàÀò‚ü® refl‚ü©‚àò‚ü® p‚ÇÅ‚àòuniversal‚âàh‚ÇÅ kp ‚ü©
      u ‚àò (p‚ÇÅ kp  ‚àò pb-univ)  ‚âà‚ü® pullÀ° u‚àòp‚ÇÅ‚âàu‚àòp‚ÇÇ ‚ü©
      (u ‚àò p‚ÇÇ kp) ‚àò pb-univ   ‚âà‚ü® pull ≥ (p‚ÇÇ‚àòuniversal‚âàh‚ÇÇ kp) ‚ü©
      u ‚àò g                   ‚àé
      where
        open HomReasoning
        open MR ùíû

retract-coequalizer : ‚àÄ {X Y} {f : Y ‚áí X} {g : X ‚áí Y} ‚Üí f RetractOf g ‚Üí IsCoequalizer (g ‚àò f) id f
retract-coequalizer f‚àòg‚âàid = IscoEqualizer‚áíIsCoequalizer (section-equalizer f‚àòg‚âàid)


module SplitCoequalizer {A B C : Obj} {f g : A ‚áí B} {e : B ‚áí C}
  (t : B ‚áí A) (s : C ‚áí B) (eq : e ‚àò f ‚âà e ‚àò g) where
  -- split coequalizer are coequalizer --
  splitCoequalizer‚áíCoequalizer : (tisSection : f ‚àò t ‚âà id)
                                 (sisSection : e ‚àò s ‚âà id)
                                 (sq : s ‚àò e ‚âà g ‚àò t)
                               ‚Üí IsCoequalizer f g e
  splitCoequalizer‚áíCoequalizer tisSection sisSection sq = record
    { equality = eq
    ; coequalize = Œª {_} {h} _ ‚Üí h ‚àò s
    ; universal = Œª {_} {h} {h‚àòf‚âàh‚àòg} ‚Üí begin
      h           ‚âà‚ü® intro ≥ tisSection ‚ü©
      h ‚àò f ‚àò t   ‚âà‚ü® extend ≥ h‚àòf‚âàh‚àòg ‚ü©
      h ‚àò g ‚àò t   ‚âà‚ü® push ≥ (‚ü∫ sq) ‚ü©
      (h ‚àò s) ‚àò e ‚àé
    ; unique = Œª {_} {h} {i} {h‚àòf‚âàh‚àòg} h‚âài‚àòe ‚Üí begin
      i         ‚âà‚ü® intro ≥ sisSection ‚ü©
      i ‚àò e ‚àò s ‚âà‚ü® pullÀ° (‚ü∫ h‚âài‚àòe) ‚ü©
      h ‚àò s     ‚àé
    }
    where
      open HomReasoning
      open MR ùíû

  splitCoequalizer‚áíCoequalizer-sym : (tisSection : g ‚àò t ‚âà id)
                                     (sisSection : e ‚àò s ‚âà id)
                                     (sq : s ‚àò e ‚âà f ‚àò t)
                                   ‚Üí IsCoequalizer f g e
  splitCoequalizer‚áíCoequalizer-sym tisSection sisSection sq = record
    { equality = eq
    ; coequalize = Œª {_} {h} _ ‚Üí h ‚àò s
    ; universal = Œª {_} {h} {h‚àòf‚âàh‚àòg} ‚Üí begin
      h           ‚âà‚ü® intro ≥ tisSection ‚ü©
      h ‚àò g ‚àò t   ‚âà‚ü® extend ≥ (‚ü∫ h‚àòf‚âàh‚àòg) ‚ü©
      h ‚àò f ‚àò t   ‚âà‚ü® push ≥ (‚ü∫ sq) ‚ü©
      (h ‚àò s) ‚àò e ‚àé
    ; unique = Œª {_} {h} {i} {h‚àòf‚âàh‚àòg} h‚âài‚àòe ‚Üí begin
      i         ‚âà‚ü® intro ≥ sisSection ‚ü©
      i ‚àò e ‚àò s ‚âà‚ü® pullÀ° (‚ü∫ h‚âài‚àòe) ‚ü©
      h ‚àò s     ‚àé
    }
    where
      open HomReasoning
      open MR ùíû

open SplitCoequalizer public

open Categories.Category.Definitions ùíû using (CommutativeSquare)

module MapBetweenCoequalizers
  {A‚ÇÅ B‚ÇÅ A‚ÇÇ B‚ÇÇ : Obj} {f‚ÇÅ g‚ÇÅ : A‚ÇÅ ‚áí B‚ÇÅ} {f‚ÇÇ g‚ÇÇ : A‚ÇÇ ‚áí B‚ÇÇ}
  (Œ± : A‚ÇÅ ‚áí A‚ÇÇ) (Œ≤ : B‚ÇÅ ‚áí B‚ÇÇ)
  (sq‚ÇÅ : CommutativeSquare Œ± f‚ÇÅ f‚ÇÇ Œ≤)                -- f‚ÇÇ ‚àò Œ± ‚âà Œ≤ ‚àò f‚ÇÅ
  (sq‚ÇÇ : CommutativeSquare Œ± g‚ÇÅ g‚ÇÇ Œ≤)                -- g‚ÇÇ ‚àò Œ± ‚âà Œ≤ ‚àò g‚ÇÅ
  where
  open Coequalizer

  ‚áícoequalize : (coeq‚ÇÇ : Coequalizer f‚ÇÇ g‚ÇÇ) ‚Üí (arr coeq‚ÇÇ ‚àò Œ≤) ‚àò f‚ÇÅ ‚âà (arr coeq‚ÇÇ ‚àò Œ≤) ‚àò g‚ÇÅ
  ‚áícoequalize coeq‚ÇÇ = begin
    (arr coeq‚ÇÇ ‚àò Œ≤) ‚àò f‚ÇÅ ‚âà‚ü® extendÀ° (‚ü∫ sq‚ÇÅ) ‚ü©
    (arr coeq‚ÇÇ ‚àò f‚ÇÇ) ‚àò Œ± ‚âà‚ü® equality coeq‚ÇÇ ‚ü©‚àò‚ü®refl ‚ü©
    (arr coeq‚ÇÇ ‚àò g‚ÇÇ) ‚àò Œ± ‚âà‚ü® extendÀ° sq‚ÇÇ ‚ü©
    (arr coeq‚ÇÇ ‚àò Œ≤) ‚àò g‚ÇÅ ‚àé
    where
      open HomReasoning
      open MR ùíû

  ‚áíMapBetweenCoeq : (coeq‚ÇÅ : Coequalizer f‚ÇÅ g‚ÇÅ)
                  ‚Üí (coeq‚ÇÇ : Coequalizer f‚ÇÇ g‚ÇÇ)
                  ‚Üí obj coeq‚ÇÅ ‚áí obj coeq‚ÇÇ
  ‚áíMapBetweenCoeq coeq‚ÇÅ coeq‚ÇÇ = coequalize coeq‚ÇÅ (‚áícoequalize coeq‚ÇÇ)
    where
      open HomReasoning

  ‚áíMapBetweenCoeqSq : (coeq‚ÇÅ : Coequalizer f‚ÇÅ g‚ÇÅ)
                    ‚Üí (coeq‚ÇÇ : Coequalizer f‚ÇÇ g‚ÇÇ)
                    ‚Üí CommutativeSquare
                        Œ≤ (arr coeq‚ÇÅ)
                        (arr coeq‚ÇÇ) (‚áíMapBetweenCoeq coeq‚ÇÅ coeq‚ÇÇ)
  ‚áíMapBetweenCoeqSq coeq‚ÇÅ coeq‚ÇÇ = universal coeq‚ÇÅ

open MapBetweenCoequalizers public

CoeqOfIsomorphicDiagram : {A B : Obj} {f g : A ‚áí B} (coeq : Coequalizer f g )
                        ‚Üí {A' B' : Obj}
                        ‚Üí (a : A ‚âÖ A') (b : B ‚âÖ B')
                        ‚Üí Coequalizer (from b ‚àò f ‚àò to a) (from b ‚àò g ‚àò to a)
CoeqOfIsomorphicDiagram {f = f} {g} coeq {A'} {B'} a b = record
  { arr = arr ‚àò to b
  ; isCoequalizer = record
    { equality = begin
        (arr ‚àò to b) ‚àò from b ‚àò f ‚àò to a ‚âà‚ü® assoc¬≤Œ≥Œ≤ ‚ü©
        (arr ‚àò to b ‚àò from b) ‚àò f ‚àò to a ‚âà‚ü® elim ≥ (isoÀ° b) ‚ü©‚àò‚ü®refl ‚ü©
        arr ‚àò f ‚àò to a                   ‚âà‚ü® extend ≥ equality ‚ü©
        arr ‚àò g ‚àò to a                   ‚âà‚ü® intro ≥ (isoÀ° b) ‚ü©‚àò‚ü®refl ‚ü©
        (arr ‚àò to b ‚àò from b) ‚àò g ‚àò to a ‚âà‚ü® assoc¬≤Œ≤Œ≥ ‚ü©
        (arr ‚àò to b) ‚àò from b ‚àò g ‚àò to a ‚àé
    ; coequalize = coequalize'
    ; universal =  Œª {_} {h} {eq} ‚Üí begin
        h                             ‚âà‚ü® switch-fromto ≥ b universal ‚ü©
        (coequalize' eq ‚àò arr) ‚àò to b ‚âà‚ü® assoc ‚ü©
        coequalize' eq ‚àò (arr ‚àò to b) ‚àé
    ; unique = Œª {_} {h} {i} {eq} e ‚Üí unique (‚ü∫ (switch-tofrom ≥ b (begin
        (i ‚àò arr) ‚àò to b ‚âà‚ü® assoc ‚ü©
        i ‚àò arr ‚àò to b   ‚âà‚ü® ‚ü∫ e ‚ü©
        h                ‚àé)))
    }
  }
  where
    open Coequalizer coeq
    open HomReasoning
    open MR ùíû
    
    f' g' : A' ‚áí B'
    f' = from b ‚àò f ‚àò to a
    g' = from b ‚àò g ‚àò to a

    equalize'‚áíequalize : {C : Obj} {h : B' ‚áí C}
                         (eq : h ‚àò f' ‚âà h ‚àò g')
                       ‚Üí (h ‚àò from b) ‚àò f ‚âà (h ‚àò from b) ‚àò g
    equalize'‚áíequalize {_} {h} eq = cancel-to ≥ a (begin
      ((h ‚àò from b) ‚àò f) ‚àò to a ‚âà‚ü® assoc¬≤Œ±Œµ ‚ü©
      h ‚àò f'                    ‚âà‚ü® eq ‚ü©
      h ‚àò g'                    ‚âà‚ü® assoc¬≤ŒµŒ± ‚ü©
      ((h ‚àò from b) ‚àò g) ‚àò to a ‚àé)

    coequalize' : {C : Obj} {h : B' ‚áí C}
                  (eq : h ‚àò f' ‚âà h ‚àò g')
                ‚Üí obj ‚áí C
    coequalize' eq = coequalize (equalize'‚áíequalize eq)


-- coequalizer commutes with coequalizer
module CoequalizerOfCoequalizer
  {A B C D : Obj} {f‚ÇÅ f‚ÇÇ : A ‚áí B} {g‚ÇÅ g‚ÇÇ : A ‚áí C} {h‚ÇÅ h‚ÇÇ : B ‚áí D} {i‚ÇÅ i‚ÇÇ : C ‚áí D}
  (coeq·∂† : Coequalizer f‚ÇÅ f‚ÇÇ) (coeq·µç : Coequalizer g‚ÇÅ g‚ÇÇ)
  (coeq ∞ : Coequalizer h‚ÇÅ h‚ÇÇ) (coeq‚Å± : Coequalizer i‚ÇÅ i‚ÇÇ)
  (let open Coequalizer)
  (f‚áíi‚ÇÅ f‚áíi‚ÇÇ : obj coeq·∂† ‚áí obj coeq‚Å±)
  (g‚áíh‚ÇÅ g‚áíh‚ÇÇ : obj coeq·µç ‚áí obj coeq ∞)
  (sq‚ÇÅ·∂†‚Å± : CommutativeSquare (arr coeq·∂†) h‚ÇÅ f‚áíi‚ÇÅ (arr coeq‚Å±))
  (sq‚ÇÇ·∂†‚Å± : CommutativeSquare (arr coeq·∂†) h‚ÇÇ f‚áíi‚ÇÇ (arr coeq‚Å±))
  (sq‚ÇÅ·µç ∞ : CommutativeSquare i‚ÇÅ (arr coeq·µç) (arr coeq ∞) g‚áíh‚ÇÅ)
  (sq‚ÇÇ·µç ∞ : CommutativeSquare i‚ÇÇ (arr coeq·µç) (arr coeq ∞) g‚áíh‚ÇÇ)
  (coeqcoeq·µç ∞ : Coequalizer g‚áíh‚ÇÅ g‚áíh‚ÇÇ) where

  {-
          f‚ÇÅ‚ÇÇ
       A ====> B ----> coeq·∂†
       ||      ||       ||
    g‚ÇÅ‚ÇÇ||   h‚ÇÅ‚ÇÇ||  sq·∂†‚Å± ||
       vv i‚ÇÅ‚ÇÇ  vv       vv        t
       C ====> D ----> coeq‚Å± ----------
       |       |         |             |
       | sq·µç ∞  |  arrSq  |             |
       v       v         v             v
     coeq·µç==>coeq ∞ --> coeqcoeq·µç ∞ ¬∑¬∑¬∑> T
               .               coequalize
               .                       ^
               .                       .
               .........................
                            u
  -}

  -- We construct a coequalizer of the parallel pair f‚áíi‚ÇÅ, f‚áíi‚ÇÇ
  -- its components will be called: obj·∂†‚Å±, arr·∂†‚Å±, ...

  open HomReasoning

  obj·∂†‚Å± : Obj
  obj·∂†‚Å± = obj coeqcoeq·µç ∞

  arr·∂†‚Å± : obj coeq‚Å± ‚áí obj·∂†‚Å±
  arr·∂†‚Å± = ‚áíMapBetweenCoeq (arr coeq·µç) (arr coeq ∞) (‚ü∫ sq‚ÇÅ·µç ∞) (‚ü∫ sq‚ÇÇ·µç ∞) coeq‚Å± coeqcoeq·µç ∞

  abstract
    arrSq : arr coeqcoeq·µç ∞ ‚àò arr coeq ∞ ‚âà arr·∂†‚Å± ‚àò arr coeq‚Å±
    arrSq = ‚áíMapBetweenCoeqSq (arr coeq·µç) (arr coeq ∞) (‚ü∫ sq‚ÇÅ·µç ∞) (‚ü∫ sq‚ÇÇ·µç ∞) coeq‚Å± coeqcoeq·µç ∞

    equality·∂†‚Å±‚àòarr : (arr·∂†‚Å± ‚àò f‚áíi‚ÇÅ) ‚àò arr coeq·∂†  ‚âà (arr·∂†‚Å± ‚àò f‚áíi‚ÇÇ) ‚àò arr coeq·∂†
    equality·∂†‚Å±‚àòarr = begin
      (arr·∂†‚Å± ‚àò f‚áíi‚ÇÅ) ‚àò arr coeq·∂†        ‚âà‚ü® extendÀ° sq‚ÇÅ·∂†‚Å± ‚ü©
      (arr·∂†‚Å± ‚àò arr coeq‚Å±) ‚àò h‚ÇÅ          ‚âà‚ü® ‚ü∫ arrSq ‚ü©‚àò‚ü®refl ‚ü©
      (arr coeqcoeq·µç ∞ ‚àò arr coeq ∞) ‚àò h‚ÇÅ ‚âà‚ü® extendÀ° (equality coeq ∞) ‚ü©
      (arr coeqcoeq·µç ∞ ‚àò arr coeq ∞) ‚àò h‚ÇÇ ‚âà‚ü® arrSq ‚ü©‚àò‚ü®refl ‚ü©
      (arr·∂†‚Å± ‚àò arr coeq‚Å±) ‚àò h‚ÇÇ          ‚âà‚ü® extendÀ° (‚ü∫ sq‚ÇÇ·∂†‚Å±) ‚ü©
      (arr·∂†‚Å± ‚àò f‚áíi‚ÇÇ) ‚àò arr coeq·∂†        ‚àé
      where
        open MR ùíû

    equality·∂†‚Å± : arr·∂†‚Å± ‚àò f‚áíi‚ÇÅ ‚âà arr·∂†‚Å± ‚àò f‚áíi‚ÇÇ
    equality·∂†‚Å± = Coequalizer‚áíEpi coeq·∂† (arr·∂†‚Å± ‚àò f‚áíi‚ÇÅ) (arr·∂†‚Å± ‚àò f‚áíi‚ÇÇ) equality·∂†‚Å±‚àòarr


    commutes : {T : Obj} {t : obj coeq‚Å± ‚áí T} (eq : t ‚àò f‚áíi‚ÇÅ ‚âà t ‚àò f‚áíi‚ÇÇ)
             ‚Üí (t ‚àò arr coeq‚Å±) ‚àò h‚ÇÅ ‚âà (t ‚àò arr coeq‚Å±) ‚àò h‚ÇÇ
    commutes {_} {t} eq = begin
      (t ‚àò arr coeq‚Å±) ‚àò h‚ÇÅ   ‚âà‚ü® extendÀ° (‚ü∫ sq‚ÇÅ·∂†‚Å±) ‚ü©
      (t ‚àò f‚áíi‚ÇÅ) ‚àò arr coeq·∂† ‚âà‚ü® eq ‚ü©‚àò‚ü®refl ‚ü©
      (t ‚àò f‚áíi‚ÇÇ) ‚àò arr coeq·∂† ‚âà‚ü® extendÀ° sq‚ÇÇ·∂†‚Å± ‚ü©
      (t ‚àò arr coeq‚Å±) ‚àò h‚ÇÇ   ‚àé
      where
        open MR ùíû
  
    u : {T : Obj} {t : obj coeq‚Å± ‚áí T} (eq : t ‚àò f‚áíi‚ÇÅ ‚âà t ‚àò f‚áíi‚ÇÇ)
      ‚Üí obj coeq ∞ ‚áí T
    u eq = coequalize coeq ∞ (commutes eq)

    uEqualizes‚àòarr : {T : Obj} {t : obj coeq‚Å± ‚áí T} (eq : t ‚àò f‚áíi‚ÇÅ ‚âà t ‚àò f‚áíi‚ÇÇ)
                   ‚Üí (u eq ‚àò g‚áíh‚ÇÅ) ‚àò arr coeq·µç ‚âà (u eq ‚àò g‚áíh‚ÇÇ) ‚àò arr coeq·µç
    uEqualizes‚àòarr {t = t} eq = begin
      (u eq ‚àò g‚áíh‚ÇÅ) ‚àò arr coeq·µç ‚âà‚ü® extendÀ° (‚ü∫ sq‚ÇÅ·µç ∞) ‚ü©
      (u eq ‚àò arr coeq ∞) ‚àò i‚ÇÅ   ‚âà‚ü® ‚ü∫ (universal coeq ∞) ‚ü©‚àò‚ü®refl ‚ü©
      (t ‚àò arr coeq‚Å±) ‚àò i‚ÇÅ      ‚âà‚ü® extendÀ° (equality coeq‚Å±) ‚ü©
      (t ‚àò arr coeq‚Å±) ‚àò i‚ÇÇ      ‚âà‚ü® universal coeq ∞ ‚ü©‚àò‚ü®refl ‚ü©
      (u eq ‚àò arr coeq ∞) ‚àò i‚ÇÇ   ‚âà‚ü® extendÀ° sq‚ÇÇ·µç ∞ ‚ü©
      (u eq ‚àò g‚áíh‚ÇÇ) ‚àò arr coeq·µç ‚àé
      where
        open MR ùíû

    uEqualizes : {T : Obj} {t : obj coeq‚Å± ‚áí T} (eq : t ‚àò f‚áíi‚ÇÅ ‚âà t ‚àò f‚áíi‚ÇÇ)
               ‚Üí u eq ‚àò g‚áíh‚ÇÅ ‚âà u eq ‚àò g‚áíh‚ÇÇ
    uEqualizes eq = Coequalizer‚áíEpi coeq·µç (u eq ‚àò g‚áíh‚ÇÅ) (u eq ‚àò g‚áíh‚ÇÇ) (uEqualizes‚àòarr eq)

    coequalize·∂†‚Å± : {T : Obj} {t : obj coeq‚Å± ‚áí T} ‚Üí t ‚àò f‚áíi‚ÇÅ ‚âà t ‚àò f‚áíi‚ÇÇ ‚Üí obj·∂†‚Å± ‚áí T
    coequalize·∂†‚Å± eq = coequalize coeqcoeq·µç ∞ (uEqualizes eq)

    universal·∂†‚Å±‚àòarr : {T : Obj} {t : obj coeq‚Å± ‚áí T} {eq : t ‚àò f‚áíi‚ÇÅ ‚âà t ‚àò f‚áíi‚ÇÇ}
                    ‚Üí t ‚àò arr coeq‚Å± ‚âà (coequalize·∂†‚Å± eq ‚àò arr·∂†‚Å±) ‚àò arr coeq‚Å±
    universal·∂†‚Å±‚àòarr {t = t} {eq} = begin
      t ‚àò arr coeq‚Å±                                  ‚âà‚ü® universal coeq ∞ ‚ü©
      u eq ‚àò arr coeq ∞                               ‚âà‚ü® universal coeqcoeq·µç ∞ ‚ü©‚àò‚ü®refl ‚ü©
      (coequalize·∂†‚Å± eq ‚àò arr coeqcoeq·µç ∞) ‚àò arr coeq ∞ ‚âà‚ü® extendÀ° arrSq ‚ü©
      (coequalize·∂†‚Å± eq ‚àò arr·∂†‚Å±) ‚àò arr coeq‚Å±          ‚àé
      where
        open MR ùíû

    universal·∂†‚Å± : {T : Obj} {t : obj coeq‚Å± ‚áí T} {eq : t ‚àò f‚áíi‚ÇÅ ‚âà t ‚àò f‚áíi‚ÇÇ}
                ‚Üí t ‚âà coequalize·∂†‚Å± eq ‚àò arr·∂†‚Å±
    universal·∂†‚Å± {t = t} {eq} = Coequalizer‚áíEpi coeq‚Å± t (coequalize·∂†‚Å± eq ‚àò arr·∂†‚Å±) universal·∂†‚Å±‚àòarr

    unique·∂†‚Å±‚àòarr‚àòarr : {T : Obj} {t : obj coeq‚Å± ‚áí T} {i : obj·∂†‚Å± ‚áí T} {eq : t ‚àò f‚áíi‚ÇÅ ‚âà t ‚àò f‚áíi‚ÇÇ}
                     ‚Üí t ‚âà i ‚àò arr·∂†‚Å±
                     ‚Üí (i ‚àò arr coeqcoeq·µç ∞) ‚àò arr coeq ∞
                     ‚âà (coequalize·∂†‚Å± eq  ‚àò arr coeqcoeq·µç ∞) ‚àò arr coeq ∞
    unique·∂†‚Å±‚àòarr‚àòarr {t = t} {i} {eq} factors = begin
      (i ‚àò arr coeqcoeq·µç ∞) ‚àò arr coeq ∞                ‚âà‚ü® extendÀ° arrSq ‚ü©
      (i ‚àò arr·∂†‚Å±) ‚àò arr coeq‚Å±                         ‚âà‚ü® ‚ü∫ factors ‚ü©‚àò‚ü®refl ‚ü©
      t ‚àò arr coeq‚Å±                                   ‚âà‚ü® universal·∂†‚Å± ‚ü©‚àò‚ü®refl ‚ü©
      (coequalize·∂†‚Å± eq ‚àò arr·∂†‚Å±) ‚àò arr coeq‚Å±           ‚âà‚ü® extendÀ° (‚ü∫ arrSq) ‚ü©
      (coequalize·∂†‚Å± eq  ‚àò arr coeqcoeq·µç ∞) ‚àò arr coeq ∞ ‚àé
      where
        open MR ùíû

    unique·∂†‚Å± : {T : Obj} {t : obj coeq‚Å± ‚áí T} {i : obj·∂†‚Å± ‚áí T} {eq : t ‚àò f‚áíi‚ÇÅ ‚âà t ‚àò f‚áíi‚ÇÇ}
             ‚Üí t ‚âà i ‚àò arr·∂†‚Å±
             ‚Üí i ‚âà coequalize·∂†‚Å± eq
    unique·∂†‚Å± {i = i} {eq} factors = Coequalizer‚áíEpi coeqcoeq·µç ∞ i (coequalize·∂†‚Å± eq) (
                                          Coequalizer‚áíEpi coeq ∞
                                          (i ‚àò arr coeqcoeq·µç ∞)
                                          (coequalize·∂†‚Å± eq  ‚àò arr coeqcoeq·µç ∞)
                                          (unique·∂†‚Å±‚àòarr‚àòarr factors)
                                        )
  -- end abstract --

  coeqcoeq·∂†‚Å± : Coequalizer f‚áíi‚ÇÅ f‚áíi‚ÇÇ
  coeqcoeq·∂†‚Å± = record
    { obj = obj·∂†‚Å±
    ; arr = arr·∂†‚Å±
    ; isCoequalizer = record
      { equality = equality·∂†‚Å±
      ; coequalize = coequalize·∂†‚Å±
      ; universal = universal·∂†‚Å±
      ; unique = unique·∂†‚Å±
      }
    }

  CoeqsAreIsomorphic : (coeq : Coequalizer f‚áíi‚ÇÅ f‚áíi‚ÇÇ) ‚Üí obj coeq ‚âÖ obj coeqcoeq·µç ∞
  CoeqsAreIsomorphic coeq = up-to-iso coeq coeqcoeq·∂†‚Å±

  -- The Isomorphism of coequalizers fits into a commutative pentagon --
  -- We need this for proving some coherences in the bicategory of monads and bimodules --
  IsoFitsInPentagon : (coeq : Coequalizer f‚áíi‚ÇÅ f‚áíi‚ÇÇ)
                    ‚Üí arr coeqcoeq·µç ∞ ‚àò arr coeq ∞
                      ‚âà from (CoeqsAreIsomorphic coeq) ‚àò arr coeq  ‚àò arr coeq‚Å±
  IsoFitsInPentagon coeq = begin
    arr coeqcoeq·µç ∞ ‚àò arr coeq ∞                               ‚âà‚ü® arrSq ‚ü©
    arr·∂†‚Å± ‚àò arr coeq‚Å±                                        ‚âà‚ü® universal coeq ‚ü©‚àò‚ü®refl ‚ü©
    (from (CoeqsAreIsomorphic coeq) ‚àò arr coeq) ‚àò arr coeq‚Å±  ‚âà‚ü® assoc ‚ü©
    from (CoeqsAreIsomorphic coeq) ‚àò arr coeq ‚àò arr coeq‚Å±    ‚àé
