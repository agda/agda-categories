{-# OPTIONS --without-K --safe #-}

open import Categories.Bicategory
open import Categories.Bicategory.LocalCoequalizers
open import Categories.Bicategory.Monad

--- The construction of the tensorproduct is in ---
--- Categories.Bicategory.Construction.Bimodules.TensorproductOfBimodules and ---
--- Categories.Bicategory.Construction.Bimodules.TensorproductOfHomomorphisms ---
--- but for almost all purposes you do not want to look at the construction there; ---
--- instead use the properties collected in this module. ---
module Categories.Bicategory.Construction.Bimodules.Tensorproduct.Homomorphism
  {o ‚Ñì e t} {ùíû : Bicategory o ‚Ñì e t} {localCoeq : LocalCoequalizers ùíû} {M‚ÇÅ M‚ÇÇ M‚ÇÉ : Monad ùíû}where

import Categories.Bicategory.Extras as Bicat
open Bicat ùíû
open Shorthands
open import Categories.Bicategory.Monad.Bimodule using (Bimodule)
open import Categories.Bicategory.Monad.Bimodule.Homomorphism using (Bimodulehomomorphism)
open import Categories.Bicategory.Construction.Bimodules.Tensorproduct.Bimodule using (_‚äó‚ÇÄ_; arr_‚äó‚ÇÄ_)

import Categories.Bicategory.Construction.Bimodules.Tensorproduct.Homomorphism.Core {ùíû = ùíû} {localCoeq} {M‚ÇÅ} {M‚ÇÇ} {M‚ÇÉ} as TensorproductOfHomomorphisms

private
  module HomCat {X} {Y} where
    open import Categories.Morphism (hom X Y) public using (Epi)
    open import Categories.Diagram.Coequalizer (hom X Y) public using (Coequalizer; Coequalizer‚áíEpi)

open HomCat

open Bimodulehomomorphism using (Œ±)

--- The names follow the scheme ---
--- [property]_‚äó‚ÇÅ_ ---
--- This makes it look like '[propery h‚ÇÇ ‚äó‚ÇÅ h‚ÇÅ]' is a field of the record entry 'h‚ÇÇ ‚äó‚ÇÅ h‚ÇÅ'. ---
--- Whenever 'field h‚ÇÇ ‚äó‚ÇÄ h‚ÇÅ' is an actual field of 'h‚ÇÇ ‚äó‚ÇÄ h‚ÇÅ', ---
--- then 'fieldDef h‚ÇÇ ‚äó‚ÇÄ h‚ÇÅ' indicates the property that is defining for that field. ---

infixl 30 _‚äó‚ÇÅ_
            
_‚äó‚ÇÅ_ : {B‚ÇÇ B'‚ÇÇ : Bimodule M‚ÇÇ M‚ÇÉ} {B‚ÇÅ B'‚ÇÅ : Bimodule M‚ÇÅ M‚ÇÇ}
    ‚Üí Bimodulehomomorphism B‚ÇÇ B'‚ÇÇ ‚Üí Bimodulehomomorphism B‚ÇÅ B'‚ÇÅ ‚Üí Bimodulehomomorphism (B‚ÇÇ ‚äó‚ÇÄ B‚ÇÅ) (B'‚ÇÇ ‚äó‚ÇÄ B'‚ÇÅ)
h‚ÇÇ ‚äó‚ÇÅ h‚ÇÅ = h‚ÇÇ‚äóh‚ÇÅ
  where
    open TensorproductOfHomomorphisms h‚ÇÇ h‚ÇÅ using (h‚ÇÇ‚äóh‚ÇÅ)
      
--- We are hiding all definitions behind an abstract clause because we think no one will ever want to know how these are defined. ---
abstract

  --- The following property is defining for the underlying 2-cell of l ‚äó‚ÇÅ r ---
  Œ±Def_‚äó‚ÇÅ_ : {B‚ÇÇ B'‚ÇÇ : Bimodule M‚ÇÇ M‚ÇÉ} {B‚ÇÅ B'‚ÇÅ : Bimodule M‚ÇÅ M‚ÇÇ}
             (h‚ÇÇ : Bimodulehomomorphism B‚ÇÇ B'‚ÇÇ) (h‚ÇÅ : Bimodulehomomorphism B‚ÇÅ B'‚ÇÅ)
           ‚Üí (arr B'‚ÇÇ ‚äó‚ÇÄ B'‚ÇÅ) ‚àò·µ• Œ± h‚ÇÇ ‚äö‚ÇÅ Œ± h‚ÇÅ ‚âà Œ± (h‚ÇÇ ‚äó‚ÇÅ h‚ÇÅ) ‚àò·µ• (arr B‚ÇÇ ‚äó‚ÇÄ B‚ÇÅ)
  Œ±Def h‚ÇÇ ‚äó‚ÇÅ h‚ÇÅ = Œ±Sq
    where
      open TensorproductOfHomomorphisms h‚ÇÇ h‚ÇÅ using (Œ±Sq)
